}
morning_classes <- df %>%
filter(sapply(schedule, function(x) any(str_detect(x, "^\\w{3}_0830$")))) %>%
select(courseCode, gpa)
non_morning_classes <- df %>%
filter(!sapply(schedule, function(x) any(str_detect(x, "^\\w{3}_0830$")))) %>%
select(courseCode, gpa)
# Calculate mean GPA for morning classes
morning_mean_gpa <- mean(morning_classes$gpa)
# Calculate mean GPA for non-morning classes
non_morning_mean_gpa <- mean(non_morning_classes$gpa)
means <- rbind(means, data.frame(semesterName = sub("(\\d{4})2", "\\1 Spring", sub("(\\d{4})1", "\\1 Fall", semesterName)), morning_mean_gpa = morning_mean_gpa, non_morning_mean = non_morning_mean_gpa))
}
}
# Create the line chart using ggplot2
ggplot(means, aes(x = semesterName)) +
geom_line(aes(y = morning_mean_gpa, color = "Morning Mean GPA", group = 1)) +
geom_line(aes(y = non_morning_mean, color = "Non-Morning Mean GPA", group = 1)) +
labs(x = "Semester", y = "Mean GPA", color = "Variable") +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
# Check for NA values
has_na <- any(is.na(means))
if (has_na) {
# Drop rows with NA values
df <- na.omit(df)
} else {
print("Data set doesn't have any NA values!")
}
# Create the line chart using ggplot2
ggplot(means, aes(x = semesterName)) +
geom_line(aes(y = morning_mean_gpa, color = "Morning Mean GPA", group = 1)) +
geom_line(aes(y = non_morning_mean, color = "Non-Morning Mean GPA", group = 1)) +
labs(x = "Semester", y = "Mean GPA", color = "Variable") +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
# Create empty data frame to populate later on
df <- data.frame()
# Populate the data frame by loading JSON files of past offerings files
for (year in 2015:2021) {
if (year == 2020) next
for (semester in 1:2) {
semesterName <- paste0(year, semester)
dataset <- fromJSON(file = paste0(paste0("offerings/", semesterName), "sections.json"))
local_df <- bind_rows(dataset)
df <- rbind(df, local_df)
}
}
# Check for NA values
has_na <- any(is.na(df))
if (has_na) {
# Drop rows with NA values
df <- na.omit(df)
} else {
print("Data set doesn't have any NA values!")
}
# Convert schedule names into human readable names
df$schedule <- str_replace_all(df$schedule, "^\\w{3}_", "")
df$schedule <- paste(substr(df$schedule, 1, 2), ":", substr(df$schedule, 3, 4), sep = "")
schedule_avg <- aggregate(gpa ~ schedule, data = df, FUN = mean)
ggplot(schedule_avg, aes(x = schedule, y = gpa)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(2.215, 2.28)) +
theme(panel.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent"),
panel.grid.major = element_line(color = rgb(0, 0, 0, alpha = 0.5), linetype = "dotted"),
panel.grid.minor = element_line(color = rgb(0, 0, 0, alpha = 0.5), linetype = "dotted"),
axis.line = element_line(color = "black")) +
xlab("Start of Lecture") +
ylab("GPA")
# Create empty data frame to populate later on
df <- data.frame()
# Populate the data frame by loading JSON files of past offerings files
for (year in 2015:2021) {
if (year == 2020) next
for (semester in 1:2) {
semesterName <- paste0(year, semester)
dataset <- fromJSON(file = paste0(paste0("offerings/", semesterName), "sections.json"))
local_df <- bind_rows(dataset)
local_df <- local_df %>%
group_by(courseCode, gpa) %>%
summarize(schedule = list(str_replace_all(schedule, "^\\w{3}_", "")))
semesterReadable <- paste0(year, "-", year + 1, ifelse(semester == 1, " Fall", " Spring"))
local_df$semester <- semesterReadable
local_df$courseCode <- str_replace_all(local_df$courseCode, "_", "-")
local_df$course <- str_replace_all(local_df$courseCode, "-\\d+", "")
local_df$dept <- str_replace_all(local_df$course, "\\d+", "")
df <- rbind(df, local_df)
}
}
# Check for NA values
has_na <- any(is.na(df))
if (has_na) {
# Drop rows with NA values
df <- na.omit(df)
} else {
print("Data set doesn't have any NA values!")
}
# Minimum number of sample count
sample_count <- 8
# Loop until finding at least sample_count number of samples
repeat {
sample_semester_and_dept_and_course <- df[df$semester == sample(df$semester, 1) &
df$dept == sample(df$dept, 1) &
df$course == sample(df$course, 1), ]
dup_schedules <- sample_semester_and_dept_and_course[duplicated(sample_semester_and_dept_and_course$schedule), ]
if(nrow(dup_schedules) >= sample_count) {
break
}
}
# Group duplicate schedules
schedule_grouped_dups <- dup_schedules %>%
group_by(schedule) %>%
summarise(courseCodes = list(courseCode),
gpas = list(gpa),
courses = list(course),
depts = list(dept))
# Shows graphs of courses that have same schedules
for(i in 1:nrow(schedule_grouped_dups)) {
row <- schedule_grouped_dups[i, ]
courses_split <- data.frame(
courseCode = row$courseCodes,
gpa = row$gpas
)
colnames(courses_split) <- c("courseCode", "gpa")
# Find difference between max and min values here so we can create a dynamically adjusted graph limit
diff <- max(courses_split$gpa) - min(courses_split$gpa)
print(ggplot(courses_split, aes(x = courseCode, y = gpa)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(min(courses_split$gpa) - (diff / 2), max(courses_split$gpa) + (diff / 2))) +
theme(panel.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent"),
panel.grid.major = element_line(color = rgb(0, 0, 0, alpha = 0.5), linetype = "dotted"),
panel.grid.minor = element_line(color = rgb(0, 0, 0, alpha = 0.5), linetype = "dotted"),
axis.line = element_line(color = "black"),
plot.title = element_text(hjust = 0.5)) +
xlab("Course") +
ylab("GPA") +
ggtitle(paste("Hypothesis 2 - Ex. ", i)))
invisible(readline(prompt="Press [enter] to see next graph"))
}
# Create empty data frame to populate later on
df <- data.frame()
# Populate the data frame by loading JSON files of past offerings files
for (year in 2015:2021) {
if (year == 2020) next
for (semester in 1:2) {
semesterName <- paste0(year, semester)
dataset <- fromJSON(file = paste0(paste0("offerings/", semesterName), "sections.json"))
local_df <- bind_rows(dataset)
local_df <- local_df %>%
group_by(courseCode, gpa) %>%
summarize(schedule = list(schedule))
semesterReadable <- paste0(year, "-", year + 1, ifelse(semester == 1, " Fall", " Spring"))
local_df$semester <- semesterReadable
local_df$courseCode <- str_replace_all(local_df$courseCode, "_", "-")
local_df$course <- str_replace_all(local_df$courseCode, "-\\d+", "")
local_df$dept <- str_replace_all(local_df$course, "\\d+", "")
df <- rbind(df, local_df)
}
}
# Check for NA values
has_na <- any(is.na(df))
if (has_na) {
# Drop rows with NA values
df <- na.omit(df)
} else {
print("Data set doesn't have any NA values!")
}
# Filter courses with at least one lecture starting at 0830
morning_classes <- df %>%
filter(grepl("0830", schedule))
# Remove duplicate courses, leave only one instance of the same course
morning_classes <- morning_classes[!duplicated(morning_classes[c("course", "semester")]), ]
# Filter courses with no lectures starting at 0830
non_morning_classes <- df %>%
filter(!grepl("0830", schedule))
# Remove duplicate courses, leave only one instance of the same course
non_morning_classes <- non_morning_classes[!duplicated(non_morning_classes[c("course", "semester")]), ]
# Find the matching courses (morning and non-morning class for same course)
matching_classes <- merge(x = morning_classes, y = non_morning_classes, by = c("course", "semester", "dept")) %>%
arrange(semester, course)
# Minimum number of sample count
sample_count <- 4
# Loop until finding at least sample_count number of samples
repeat {
sample_semester_and_dept <- matching_classes[matching_classes$semester == sample(matching_classes$semester, 1) &
matching_classes$dept == sample(matching_classes$dept, 1), ]
if(nrow(sample_semester_and_dept) >= sample_count) {
break
}
}
sample_courses <- sample_semester_and_dept[sample(nrow(sample_semester_and_dept), 4), ]
# Show graphs for each different sample course
for(i in 1:nrow(sample_courses)) {
course <- sample_courses[i,]
courseCodes <- c(paste(course$courseCode.x, course$semester, "(Morning)"), paste(course$courseCode.y, course$semester, "(Non-Morning)"))
courses_split <- data.frame(
courseCode = as.factor(courseCodes),
gpa = c(course$gpa.x, course$gpa.y)
)
# Find difference between max and min values here so we can create a dynamically adjusted graph limit
diff <- max(courses_split$gpa) - min(courses_split$gpa)
print(ggplot(courses_split, aes(x = courseCode, y = gpa)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = courseCodes) +
coord_cartesian(ylim = c(min(courses_split$gpa) - (diff / 2), max(courses_split$gpa) + (diff / 2))) +
theme(panel.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent"),
panel.grid.major = element_line(color = rgb(0, 0, 0, alpha = 0.5), linetype = "dotted"),
panel.grid.minor = element_line(color = rgb(0, 0, 0, alpha = 0.5), linetype = "dotted"),
axis.line = element_line(color = "black"),
plot.title = element_text(hjust = 0.5)) +
xlab("Course") +
ylab("GPA") +
ggtitle(paste("Hypothesis 1 - Ex. ", i)))
invisible(readline(prompt="Press [enter] to see next graph"))
}
# Create empty data frame to populate later on
df <- data.frame()
# Populate the data frame by loading JSON files of past offerings files
for (year in 2015:2021) {
if (year == 2020) next
for (semester in 1:2) {
semesterName <- paste0(year, semester)
dataset <- fromJSON(file = paste0(paste0("offerings/", semesterName), "sections.json"))
local_df <- bind_rows(dataset)
local_df <- local_df %>%
group_by(courseCode, gpa) %>%
summarize(schedule = list(schedule))
semesterReadable <- paste0(year, "-", year + 1, ifelse(semester == 1, " Fall", " Spring"))
local_df$semester <- semesterReadable
local_df$courseCode <- str_replace_all(local_df$courseCode, "_", "-")
local_df$course <- str_replace_all(local_df$courseCode, "-\\d+", "")
local_df$dept <- str_replace_all(local_df$course, "\\d+", "")
df <- rbind(df, local_df)
}
}
# Check for NA values
has_na <- any(is.na(df))
if (has_na) {
# Drop rows with NA values
df <- na.omit(df)
} else {
print("Data set doesn't have any NA values!")
}
# Minimum number of sample count
sample_count <- 6
# Loop until finding at least sample_count number of samples
repeat {
sample_semester_and_depts <- df[df$semester == sample(df$semester, 1) &
df$dept %in% sample(unique(df$dept), 2), ]
uniq_schedules <- data.frame(
schedule = I(unique(sample_semester_and_depts$schedule)),
matchCount = numeric(length(unique(sample_semester_and_depts$schedule))))
for(i in 1:nrow(uniq_schedules)) {
dept1 <- sample_semester_and_depts[1,]$dept
selected_schedule <- sample_semester_and_depts[1,]$schedule
dup_schedules_dept1 <- sample_semester_and_depts[sample_semester_and_depts$dept == dept1 & mapply(setequal, sample_semester_and_depts$schedule, selected_schedule), ]
dup_schedules_dept2 <- sample_semester_and_depts[sample_semester_and_depts$dept != dept1 & mapply(setequal, sample_semester_and_depts$schedule, selected_schedule), ]
min_sample_count <- min(nrow(dup_schedules_dept1), nrow(dup_schedules_dept2))
uniq_schedules[i, ]$matchCount <- min_sample_count * 2
}
max_match_row_idx <- which.max(uniq_schedules$matchCount)
dept1 <- sample_semester_and_depts[1,]$dept
selected_schedule <- uniq_schedules[max_match_row_idx,]$schedule
dup_schedules_dept1 <- sample_semester_and_depts[sample_semester_and_depts$dept == dept1 & mapply(setequal, sample_semester_and_depts$schedule, selected_schedule), ]
dup_schedules_dept2 <- sample_semester_and_depts[sample_semester_and_depts$dept != dept1 & mapply(setequal, sample_semester_and_depts$schedule, selected_schedule), ]
min_sample_count <- min(nrow(dup_schedules_dept1), nrow(dup_schedules_dept2))
dup_schedules_dept1 <- dup_schedules_dept1[1:min_sample_count, ] %>% arrange(gpa)
dup_schedules_dept2 <- dup_schedules_dept2[1:min_sample_count, ] %>% arrange(gpa)
if(nrow(dup_schedules_dept1) + nrow(dup_schedules_dept2) >= sample_count) {
break
}
}
combined <- data.frame(
courseNum = as.factor(paste0("Course ", seq(nrow(dup_schedules_dept1)))),
gpa1 = dup_schedules_dept1$gpa,
gpa2 = dup_schedules_dept2$gpa,
dept1 = dup_schedules_dept1$dept,
dept2 = dup_schedules_dept2$dept
)
# Find difference between max and min values here so we can create a dynamically adjusted graph limit
diff <- max(combined$gpa1, combined$gpa2) - min(combined$gpa1, combined$gpa2)
ggplot(combined, aes(x = courseNum)) +
geom_line(aes(y = gpa1, color = paste("GPA of course of", dept1, "dept"), group = 1)) +
geom_line(aes(y = gpa2, color = paste("GPA of course of", dept2, "dept"), group = 1)) +
labs(x = "Course", y = "GPA", color = "Variable") +
scale_color_manual(values = c("red", "blue")) +
coord_cartesian(ylim = c(min(combined$gpa1, combined$gpa2) - (diff / 4), max(combined$gpa1, combined$gpa2) + (diff / 4))) +
theme(panel.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent"),
panel.grid.major = element_line(color = rgb(0, 0, 0, alpha = 0.5), linetype = "dotted"),
panel.grid.minor = element_line(color = rgb(0, 0, 0, alpha = 0.5), linetype = "dotted"),
axis.line = element_line(color = "black"),
plot.title = element_text(hjust = 0.5),
legend.position = "top") +
ggtitle("Hypothesis 3")
# Create empty data frame to populate later on
df <- data.frame()
# Populate the data frame by loading JSON files of past offerings files
for (year in 2015:2021) {
if (year == 2020) next
for (semester in 1:2) {
semesterName <- paste0(year, semester)
dataset <- fromJSON(file = paste0(paste0("offerings/", semesterName), "sections.json"))
local_df <- bind_rows(dataset)
local_df <- local_df %>%
group_by(courseCode, gpa) %>%
summarize(schedule = list(str_replace_all(schedule, "^\\w{3}_", "")))
semesterReadable <- paste0(year, "-", year + 1, ifelse(semester == 1, " Fall", " Spring"))
local_df$semester <- semesterReadable
local_df$courseCode <- str_replace_all(local_df$courseCode, "_", "-")
local_df$course <- str_replace_all(local_df$courseCode, "-\\d+", "")
local_df$dept <- str_replace_all(local_df$course, "\\d+", "")
df <- rbind(df, local_df)
}
}
# Check for NA values
has_na <- any(is.na(df))
if (has_na) {
# Drop rows with NA values
df <- na.omit(df)
} else {
print("Data set doesn't have any NA values!")
}
# Minimum number of sample count
sample_count <- 8
# Loop until finding at least sample_count number of samples
repeat {
sample_semester_and_dept_and_course <- df[df$semester == sample(df$semester, 1) &
df$dept == sample(df$dept, 1) &
df$course == sample(df$course, 1), ]
dup_schedules <- sample_semester_and_dept_and_course[duplicated(sample_semester_and_dept_and_course$schedule), ]
if(nrow(dup_schedules) >= sample_count) {
break
}
}
# Group duplicate schedules
schedule_grouped_dups <- dup_schedules %>%
group_by(schedule) %>%
summarise(courseCodes = list(courseCode),
gpas = list(gpa),
courses = list(course),
depts = list(dept))
# Graph 1 - GPA's of Courses That Have Same Schedule
for(i in 1:nrow(schedule_grouped_dups)) {
row <- schedule_grouped_dups[i, ]
courses_split <- data.frame(
courseCode = row$courseCodes,
gpa = row$gpas
)
colnames(courses_split) <- c("courseCode", "gpa")
# Find difference between max and min values here so we can create a dynamically adjusted graph limit
diff <- max(courses_split$gpa) - min(courses_split$gpa)
print(ggplot(courses_split, aes(x = courseCode, y = gpa)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(min(courses_split$gpa) - (diff / 2), max(courses_split$gpa) + (diff / 2))) +
theme(panel.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent"),
panel.grid.major = element_line(color = rgb(0, 0, 0, alpha = 0.5), linetype = "dotted"),
panel.grid.minor = element_line(color = rgb(0, 0, 0, alpha = 0.5), linetype = "dotted"),
axis.line = element_line(color = "black"),
plot.title = element_text(hjust = 0.5)) +
xlab("Course") +
ylab("GPA") +
ggtitle("GPA's of Courses That Have Same Schedule"))
invisible(readline(prompt="Press [enter] to see next graph"))
}
group_by(dept, schedule) %>%
summarise(mean_gpa = mean(gpa))
# Graph 2 - Mean GPAs of Departments Based On Schedule
mean_gpa_of_all_depts_of_same_schedule <- df %>%
group_by(dept, schedule) %>%
summarise(mean_gpa = mean(gpa))
# Remove unique schedules, so can be compared based on common schedules instead
mean_gpa_of_all_depts_of_same_schedule <- mean_gpa_of_all_depts_of_same_schedule %>%
group_by(schedule) %>%
filter(n_distinct(dept) == n_distinct(mean_gpa_of_all_depts_of_same_schedule$dept)) %>%
ungroup()
# Find difference between max and min values here so we can create a dynamically adjusted graph limit
diff <- max(mean_gpa_of_all_depts_of_same_schedule$mean_gpa) - min(mean_gpa_of_all_depts_of_same_schedule$mean_gpa)
# Turn schedule names into human readable format
mean_gpa_of_all_depts_of_same_schedule$schedule <- str_replace_all(str_replace_all(str_replace_all(paste(mean_gpa_of_all_depts_of_same_schedule$schedule), '"|c', ""), ', ', "-"), "(\\d{2})(\\d{2})", "\\1:\\2")
ggplot(mean_gpa_of_all_depts_of_same_schedule, aes(x = paste(schedule), y = mean_gpa, group = dept, color = dept)) +
geom_line() +
labs(x = "Schedule", y = "Mean GPA", title = "Mean GPAs of Departments Based On Schedule", color = "Department") +
scale_color_manual(values = c("red", "blue", "purple", "brown", "orange")) +
coord_cartesian(ylim = c(min(mean_gpa_of_all_depts_of_same_schedule$mean_gpa) - (diff / 4), max(mean_gpa_of_all_depts_of_same_schedule$mean_gpa) + (diff / 4))) +
theme(panel.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent"),
panel.grid.major = element_line(color = rgb(0, 0, 0, alpha = 0.5), linetype = "dotted"),
panel.grid.minor = element_line(color = rgb(0, 0, 0, alpha = 0.5), linetype = "dotted"),
axis.line = element_line(color = "black"),
plot.title = element_text(hjust = 0.5),
legend.position = "top")
# Create empty data frame to populate later on
df <- data.frame()
# Populate the data frame by loading JSON files of past offerings files
for (year in 2015:2021) {
if (year == 2020) next
for (semester in 1:2) {
semesterName <- paste0(year, semester)
dataset <- fromJSON(file = paste0(paste0("offerings/", semesterName), "sections.json"))
local_df <- bind_rows(dataset)
local_df <- local_df %>%
group_by(courseCode, gpa) %>%
summarize(schedule = list(schedule))
semesterReadable <- paste0(year, "-", year + 1, ifelse(semester == 1, " Fall", " Spring"))
local_df$semester <- semesterReadable
local_df$courseCode <- str_replace_all(local_df$courseCode, "_", "-")
local_df$course <- str_replace_all(local_df$courseCode, "-\\d+", "")
local_df$dept <- str_replace_all(local_df$course, "\\d+", "")
df <- rbind(df, local_df)
}
}
# Check for NA values
has_na <- any(is.na(df))
if (has_na) {
# Drop rows with NA values
df <- na.omit(df)
} else {
print("Data set doesn't have any NA values!")
}
# Minimum number of sample count
sample_count <- 6
# Loop until finding at least sample_count number of samples
repeat {
sample_semester_and_depts <- df[df$semester == sample(df$semester, 1) &
df$dept %in% sample(unique(df$dept), 2), ]
uniq_schedules <- data.frame(
schedule = I(unique(sample_semester_and_depts$schedule)),
matchCount = numeric(length(unique(sample_semester_and_depts$schedule))))
for(i in 1:nrow(uniq_schedules)) {
dept1 <- sample_semester_and_depts[1,]$dept
selected_schedule <- sample_semester_and_depts[1,]$schedule
dup_schedules_dept1 <- sample_semester_and_depts[sample_semester_and_depts$dept == dept1 & mapply(setequal, sample_semester_and_depts$schedule, selected_schedule), ]
dup_schedules_dept2 <- sample_semester_and_depts[sample_semester_and_depts$dept != dept1 & mapply(setequal, sample_semester_and_depts$schedule, selected_schedule), ]
min_sample_count <- min(nrow(dup_schedules_dept1), nrow(dup_schedules_dept2))
uniq_schedules[i, ]$matchCount <- min_sample_count * 2
}
max_match_row_idx <- which.max(uniq_schedules$matchCount)
dept1 <- sample_semester_and_depts[1,]$dept
selected_schedule <- uniq_schedules[max_match_row_idx,]$schedule
dup_schedules_dept1 <- sample_semester_and_depts[sample_semester_and_depts$dept == dept1 & mapply(setequal, sample_semester_and_depts$schedule, selected_schedule), ]
dup_schedules_dept2 <- sample_semester_and_depts[sample_semester_and_depts$dept != dept1 & mapply(setequal, sample_semester_and_depts$schedule, selected_schedule), ]
min_sample_count <- min(nrow(dup_schedules_dept1), nrow(dup_schedules_dept2))
dup_schedules_dept1 <- dup_schedules_dept1[1:min_sample_count, ] %>% arrange(gpa)
dup_schedules_dept2 <- dup_schedules_dept2[1:min_sample_count, ] %>% arrange(gpa)
if(nrow(dup_schedules_dept1) + nrow(dup_schedules_dept2) >= sample_count) {
break
}
}
# Graph 1 - Different Courses With Same Schedule From 2 Departments
combined <- data.frame(
courseNum = as.factor(paste0("Course ", seq(nrow(dup_schedules_dept1)))),
gpa1 = dup_schedules_dept1$gpa,
gpa2 = dup_schedules_dept2$gpa,
dept1 = dup_schedules_dept1$dept,
dept2 = dup_schedules_dept2$dept
)
# Find difference between max and min values here so we can create a dynamically adjusted graph limit
diff <- max(combined$gpa1, combined$gpa2) - min(combined$gpa1, combined$gpa2)
ggplot(combined, aes(x = courseNum)) +
geom_line(aes(y = gpa1, color = paste("GPA of course of", dept1, "dept"), group = 1)) +
geom_line(aes(y = gpa2, color = paste("GPA of course of", dept2, "dept"), group = 1)) +
labs(x = "Course", y = "GPA", color = "Variable") +
scale_color_manual(values = c("red", "blue")) +
coord_cartesian(ylim = c(min(combined$gpa1, combined$gpa2) - (diff / 4), max(combined$gpa1, combined$gpa2) + (diff / 4))) +
theme(panel.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent"),
panel.grid.major = element_line(color = rgb(0, 0, 0, alpha = 0.5), linetype = "dotted"),
panel.grid.minor = element_line(color = rgb(0, 0, 0, alpha = 0.5), linetype = "dotted"),
axis.line = element_line(color = "black"),
plot.title = element_text(hjust = 0.5),
legend.position = "top") +
ggtitle(paste("GPAs of", nrow(combined) ,"Different Courses With Same Schedule From 2 Departments"))
# Graph 2 - Mean GPA of Morning Classes vs Non-Morning Classes of 2 Random Departments
# Find mean GPA of Morning and Non-Morning classes of 2 random departments and make sure their semester data are same
repeat {
selected_depts <- sample(unique(df$dept), 2)
morning_df <- df %>%
filter(dept %in% selected_depts, grepl("0830", schedule)) %>%
group_by(dept, semester) %>%
summarise(morning_mean_gpa = mean(gpa))
non_morning_df <- df %>%
filter(dept %in% selected_depts, !grepl("0830", schedule)) %>%
group_by(dept, semester) %>%
summarise(non_morning_mean_gpa = mean(gpa))
dept1 <- morning_df$dept[1]
if(nrow(morning_df[morning_df$dept == dept1, ]) == nrow(morning_df[morning_df$dept != dept1, ]) &&
all(morning_df[morning_df$dept == dept1, ]$semester == morning_df[morning_df$dept != dept1, ]$semester)) {
break
}
}
combined <- inner_join(morning_df, non_morning_df, by = c("dept", "semester"))
# Find difference between max and min values here so we can create a dynamically adjusted graph limit
diff <- max(combined$morning_mean_gpa, combined$non_morning_mean_gpa) - min(combined$morning_mean_gpa, combined$non_morning_mean_gpa)
ggplot(combined, aes(x = semester, y = morning_mean_gpa, color = dept, group = dept)) +
geom_line() +
geom_point() +
geom_line(aes(y = non_morning_mean_gpa), linetype = "dashed") +
geom_point(aes(y = non_morning_mean_gpa), shape = 16) +
labs(x = "Semester", y = "Mean GPA", title = "Mean GPA of Morning Classes vs Non-Morning Classes of Each Department", subtitle = "Non-Dashed = Morning Classes / Dashed = Non-Morning Classes", color = "Department") +
theme(panel.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent"),
panel.grid.major = element_line(color = rgb(0, 0, 0, alpha = 0.5), linetype = "dotted"),
panel.grid.minor = element_line(color = rgb(0, 0, 0, alpha = 0.5), linetype = "dotted"),
axis.line = element_line(color = "black"),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.position = "top")
